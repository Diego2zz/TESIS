##########-Analisis proteomico-##########

#Protfasta:remover secuencias invalidas
import protfasta
sequencess = protfasta.read_fasta('Archivo.fasta',invalid_sequence_action='remove')
protfasta.write_fasta(sequencess, 'Archivo_de_salida.fasta')

#Natsort:ordenar naturalmente los archivos
import natsort
  
#localCIDER:calculo de parametros a partir de una secuencia primaria
import os
from localcider.sequenceParameters import SequenceParameters
import localcider

# obtener la lista de arhivos del directorio
filelist = os.listdir(".")

# Crear lista vacia
list_of_SeqObjs = []
 
# Llenar la lista con los objetos de  SequenceParameters que se contruyeron de las secuencias de cada archivo
for file in (natsort.natsorted(filelist)): #Aqui natsorted ordena la lista (1,2,3,...,100,101,etc)
      list_of_SeqObjs.append(SequenceParameters(sequenceFile=file))
  
#funciones utilizadas presentes en localcider (funcion_localcider()) 
#definicion en http://pappulab.github.io/localCIDER/

  get_kappa()
  get_mean_hydropathy()
  get_uversky_hydropathy()
  get_FCR(pH=None) 
  get_NCPR(pH=None)
  get_isoelectric_point()
  get_molecular_weight()
  get_fraction_negative()
  get_fraction_positive()
  get_Omega()
  get_mean_net_charge(pH=None)
  get_phase_plot_region()
  get_length()
  get_fraction_disorder_promoting()
  get_kappa_after_phosphorylation()
  get_countPos())
  get_countNeg())
  get_countNeut())
  get_fraction_expanding(pH=None))  
  get_PPII_propensity(mode='hilser'))

#Creacion de una lista vacia filelistX, agregar resultado de la funcion_localcider aplicada al objeto a la lista
filelistX = []
for obj in list_of_SeqObjs:
    filelist2.append(obj.funcion_localcider())
 
#Crear una lista vacia filelistZ, agregar secuencia de cada objeto a la lista
filelistZ = []
   for obj in list_of_SeqObjs:
  filelist16.append(obj.SeqObj)  
    
#Pandas:Subida, edicion y descarga de archivos .xlsx
   import pandas as pd

#Subir un dataframe a partir de un archivos .xlsx
df = pd.read_excel('direccion al archivo.xlsx', engine='openpyxl')

#para ver dataframe creado en las filas 99 a 105
df.loc[99:105]

#Agregar los resultados presentes en las listas generadas con resutados de funciones_localcider al dataframe cargado.
df['nombre de la columna de resultados'] = (natsort.natsorted(filelist)) #genera columna lista de archivos ordenada naturalmente
df['nombre de la columna de resultados'] = (filelistX)
df['nombre de la columna de resultados'] = (filelistZ)

#Descargar el dataframe a archivo de excel 
df.to_excel (r'direccion al archivo.xlsx', index = False, header=True)



 
